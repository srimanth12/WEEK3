import 'package:http/http.dart' as http;

var url = Uri.https('example.com', 'whatsit/create');
var response = await http.post(url, body: {'name': 'doodle', 'color': 'blue'});
print('Response status: ${response.statusCode}');
print('Response body: ${response.body}');

print(await http.read(Uri.https('example.com', 'foobar.txt')));
var client = http.Client();
try {
  var response = await client.post(
      Uri.https('example.com', 'whatsit/create'),
      body: {'name': 'doodle', 'color': 'blue'});
  var decodedResponse = jsonDecode(utf8.decode(response.bodyBytes)) as Map;
  var uri = Uri.parse(decodedResponse['uri'] as String);
  print(await client.get(uri));
} finally {
  client.close();
}
class UserAgentClient extends http.BaseClient {
  final String userAgent;
  final http.Client _inner;

  UserAgentClient(this.userAgent, this._inner);

  Future<http.StreamedResponse> send(http.BaseRequest request) {
    request.headers['user-agent'] = userAgent;
    return _inner.send(request);
  }
}
import 'package:http/http.dart' as http;
import 'package:http/retry.dart';
Future<void> main() async {
  final client = RetryClient(http.Client());
  try {
    print(await client.read(Uri.http('example.org', '')));
  } finally {
    client.close();
  }
}
Future<Response> getData() async {
  Response res =
      await get(Uri.parse("https://632583f24cd1a2834c3f5cc3.mockapi.io/api/forms/data"));
  if (res.statusCode == 200) {
    decode(res);
    return res;
  } else {
    print("Not able to get data");
    return res;
  }
}
List<dynamic> decode(Response res) {
  List<dynamic> posts = jsonDecode(res.body);
  print(posts);
  return posts;
}
[{
"title" : value,
"created_at" : value ,
"desc": value ,
"url" : value,
"id": value
},
{
"title" : value,
"created_at" : value ,
"desc": value ,
"url" : value,
"id": value
},
{
"title" : value,
"created_at" : value ,
"desc": value ,
"url" : value,
"id": value
},....]
print(posts[0]['title']);
class Post {
  String title;
  String id;
  String desc;
  Post({required this.id, required this.title, required this.desc});
}
class Post {
  String title;
  String id;
  String desc;
  Post({required this.id, required this.title, required this.desc});
  factory Post.fromJson(Map<String, dynamic> json) {
    return Post(
      title: json['title'],
      id: json['id'],
      desc: json['desc'],
    );
  }
}
List<Post> convertMapToObject(List<dynamic> posts) {
  List<Post> postsObj =
      posts.map((dynamic item) => Post.fromJson(item)).toList();
  return postsObj;
}
Future<List<Post>> getPosts() async {
  Response res = await getData();
  return convertMapToObject(decode(res));
}
import 'package:flutter/material.dart';
import 'package:http_article/posts.dart';
import 'package:http_article/services.dart';
 
class PostViewer extends StatefulWidget {
  const PostViewer({super.key});
 
  @override
  State<PostViewer> createState() => _PostViewerState();
}
 
class _PostViewerState extends State<PostViewer> {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: FutureBuilder(
        future: getPosts(),
        builder: (context, AsyncSnapshot<List<Post>> snapshot) {
          if (snapshot.hasError) {
            return Text("Failed to get data");
          } else if (snapshot.hasData) {
            return ListView.builder(
              itemCount: snapshot.data!.length,
              itemBuilder: (context, index) {
                return ListTile(
                  title: Text(snapshot.data![index].title),
                  subtitle: Text(snapshot.data![index].desc),
                  leading: Text((snapshot.data![index].id).toString()),
                );
              },
            );
          }
          return Center(child: CircularProgressIndicator());
        },
      ),
    );
  }
}
snapshot.data